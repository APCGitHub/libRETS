top_srcdir=@top_srcdir@

SHELL = /bin/sh

prefix=@prefix@
datadir=@datadir@
exec_prefix=@exec_prefix@
bindir=@bindir@
mandir=@mandir@
sysconfdir=@sysconfdir@
docdir=$(datadir)/doc
libdir=@libdir@
includedir=@includedir@

INSTALL=@INSTALL@
INSTALL_PROGRAM=@INSTALL_PROGRAM@
INSTALL_DATA=@INSTALL_DATA@
MKINSTALLDIRS=$(top_srcdir)/project/build/mkinstalldirs

CC=@CC@
CXX=@CXX@
CFLAGS=@CFLAGS@ @DEFS@ $(BOOST_CFLAGS) $(CURL_CFLAGS) $(EXPAT_CFLAGS)
LIBS=@LIBS@
LDFLAGS=@LDFLAGS@

USE_DEPENDS_IN=@USE_DEPENDS@
USE_EXAMPLES=@USE_EXAMPLES@

TARGET=unix
TARGET_CFLAGS=-DTARGET_UNIX

BOOST_CFLAGS=@BOOST_CFLAGS@
BOOST_LIBS=@BOOST_LIBS@
BOOST_FILESYSTEM=@BOOST_FILESYSTEM@
BOOST_PROGRAM_OPTIONS=@BOOST_PROGRAM_OPTIONS@

CURL_CFLAGS=@CURL_CFLAGS@
CURL_LDFLAGS=@CURL_LIBS@

EXPAT_CFLAGS=@EXPAT_CFLAGS@
EXPAT_LDFLAGS=@EXPAT_LIBS@

ANTLR=@ANTLR@
ANTLR_LDFLAGS=@ANTLR_LIBS@

HAVE_CPPUNIT=@HAVE_CPPUNIT@
CPPUNIT_CFLAGS=@CPPUNIT_CFLAGS@
CPPUNIT_LDFLAGS=@CPPUNIT_LIBS@

HAVE_DOXYGEN=@HAVE_DOXYGEN@
DOXYGEN=doxygen

# Put targets here so that zsh can complete on them, as zsh won't
# follow the include directives.
#
# These use a separate make to only enable dependency checking for
# targets that actually compile something.
all:
	@$(MAKE) USE_DEPENDS=$(USE_DEPENDS_IN) _all
debug:
	@$(MAKE) USE_DEPENDS=$(USE_DEPENDS_IN) _debug
build:
	@$(MAKE) USE_DEPENDS=$(USE_DEPENDS_IN) _build
install:
	@$(MAKE) USE_DEPENDS=$(USE_DEPENDS_IN) _install
test:
	@$(MAKE) USE_DEPENDS=$(USE_DEPENDS_IN) _test

doc: _doc
doc-api: _doc-api

dist: _dist
clean: _clean
distclean: _distclean
maintainer-clean: _maintainer-clean

include $(top_srcdir)/project/build/version.mk
include $(top_srcdir)/project/build/sources.mk
include $(top_srcdir)/project/build/rules.mk
